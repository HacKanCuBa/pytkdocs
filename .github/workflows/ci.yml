name: ci

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

defaults:
  run:
    shell: bash

jobs:

  quality:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: 3.6

    - name: Set up the cache
      uses: actions/cache@v1
      with:
        path: .venv
        key: cache-python-packages

    - name: Set up the project
      run: |
        pip install poetry invoke safety
        poetry config virtualenvs.in-project true
        bash ./scripts/setup.sh

    - name: Check if the documentation builds correctly
      run: poetry run invoke check-docs

    - name: Check the code quality
      run: poetry run invoke check-code-quality

    - name: Check if the code is correctly typed
      run: poetry run invoke check-types

    - name: Check for vulnerabilities in dependencies
      run: poetry run invoke check-dependencies

  tests:

    strategy:
      max-parallel: 6
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6,3.7,3.8]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up the cache
      uses: actions/cache@v1
      env:
        cache-name: cache-python-packages
      with:
        path: .venv
        key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ env.cache-name }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.python-version }}-
          ${{ matrix.os }}-

    - name: Set up the project
      run: |
        pip install poetry invoke
        poetry config virtualenvs.in-project true
        bash ./scripts/setup.sh

    - name: Run the test suite (Not Windows)
      run: poetry run invoke test
      if: ${{ runner.os != 'Windows' }}

    - name: Run the test suite (Windows)
      run: poetry run pytest -c config/pytest.ini -n auto src scripts tests tasks.py
      if: ${{ runner.os == 'Windows' }}
